// Copyright 2021-2023 NetEase.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//  http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#include "Python.hpp"

#include <memory>
#include <vector>
#include "base_logging.hpp"
#include "params.hpp"
// #include "torch/deploy.h"
// #include <torch/csrc/deploy/deploy.h>
#include <fstream>
#include "reflect.h"
#include <ATen/ATen.h>
// #include <torch/extension.h>
#include <torch/python.h>
namespace ipipe {
class PythonWrapper {
 public:
  PythonWrapper() = default;

  bool init(const std::string& module_name, const std::string& backend_name) {
    std::lock_guard<std::mutex> tmp(lock_);

    py::gil_scoped_acquire acquire;
    backend_ = py::module::import(module_name).attr(backend_name);
    return true;
  }

  ~PythonWrapper() { _obj.release(); }

  at::Tensor call(at::Tensor data) {
    py::gil_scoped_acquire acquire;
    // pybind11::object o = pybind11::cast(data);
    // pybind11::handle h = pybind11::cast(data);
    return _obj(data).cast<at::Tensor>();
  }

 private:
  py::object _obj;
  py::object backend_;
  InitState state_{InitState::Uninit};
  std::mutex lock_;
};
PythonWrapper gwrapper;

bool Python::init(const std::unordered_map<std::string, std::string>& config_param,
                  dict dict_config) {
  py_wrapper_ = std::make_shared<PythonWrapper>();
  params_ =
      std::unique_ptr<Params>(new Params({{"backend_name", "__call__"}}, {"module_name"}, {}, {}));
  if (params_->init(config_param)) {
    return false;
  }
  return py_wrapper_->init(params_->at("module_name"), params_->at("backend_name"));
}

void Python::forward(dict input_dict) {
  // params_->check_and_update(input_dict);

  data = gwrapper.call(input_dict);

  // torch::deploy::InterpreterManager manager(2);

  // // Acquire a session on one of the interpreters
  // auto I = manager.acquireOne();

  // // from builtins import print
  // // print("Hello world!")
  // auto result = I.global("Python", "tensor2tensor")({data});
  // input[TASK_RESULT_KEY] = result;

  return;
}
IPIPE_REGISTER(Backend, Python, "Python");
}  // namespace ipipe