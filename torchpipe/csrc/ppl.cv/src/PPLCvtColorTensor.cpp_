
#include "PPLCvtColorTensorTensor.hpp"

#include <ppl/cv/cuda/cvtcolor.h>
// #include <torch/torch.h>
#include "c10/cuda/CUDAStream.h"

#include <torch/torch.h>

#include "ipipe_utils.hpp"
#include "base_logging.hpp"
#include "reflect.h"
#include "exception.hpp"
#include "ppl_cv_helper.hpp"

namespace ipipe {
bool PPLCvtColorTensorTensor::init(const std::unordered_map<std::string, std::string>& config,
                                   dict dict_config) {
  params_ = std::unique_ptr<Params>(new Params({}, {"color"}, {}, {}));
  if (!params_->init(config)) return false;

  TRACE_EXCEPTION(color_ = std::stoi(params_->operator[]("color")));

  return true;
}
void PPLCvtColorTensorTensor::forward(dict input_dict) {
  HWCTensorWrapper ppl(input_dict);
  auto& input_tensor = ppl.input_tensor;
  auto& output_tensor = ppl.output_tensor;

  cudaStream_t stream = c10::cuda::getCurrentCUDAStream();

  int img_h = input_tensor.sizes()[0];
  int img_w = input_tensor.sizes()[1];
  int c = input_tensor.sizes()[2];

  if (input_tensor.scalar_type() == torch::kByte) {
    unsigned char* image = input_tensor.data_ptr<unsigned char>();
    unsigned char* output = output_tensor.data_ptr<unsigned char>();

    auto ret = ppl::cv::cuda::CopyMakeBorder<unsigned char, 3>(
        stream, img_h, img_w, input_tensor.stride(0), image, output_tensor.stride(0), output, top_,
        bottom_, left_, right_, ppl::cv::BORDER_CONSTANT, 0);
    if (ret != ppl::common::RC_SUCCESS) {
      SPDLOG_ERROR("PPLCvtColorTensorTensor: Resize failed, ret = {}", ret);
      return;
    }

  } else if (input_tensor.scalar_type() == torch::kFloat) {
    float* image = input_tensor.data_ptr<float>();
    float* output = output_tensor.data_ptr<float>();

    auto ret = ppl::cv::cuda::CopyMakeBorder<float, 3>(
        stream, img_h, img_w, input_tensor.stride(0), image, output_tensor.stride(0), output, top_,
        bottom_, left_, right_, ppl::cv::BORDER_CONSTANT, 0);
    if (ret != ppl::common::RC_SUCCESS) {
      SPDLOG_ERROR("PPLCvtColorTensorTensor: Resize failed");
      return;
    }
  } else {
    throw std::invalid_argument("error datatype of tensor. Need datatype float or char.");
  }
}

IPIPE_REGISTER(Backend, PPLCvtColorTensorTensor, "PPLCvtColorTensorTensor")
}  // namespace ipipe