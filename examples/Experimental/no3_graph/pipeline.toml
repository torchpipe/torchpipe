batching_timeout = 10 #默认的凑batch的超时时间
precision = "fp16" 
instance_num=3
#### main graph ####
[jpg_decoder]
backend = "Sequential[DecodeTensor,(result2other)cvtColorTensor,ResizePadTensor,SyncTensor]"
color = "bgr"
instance_num = 10
max_h = 416
max_w = 416

next = "detect"

[detect]
backend = "S[TensorrtTensor,SyncTensor]" 
batching_timeout = 5
instance_num = 1
max = 8
net_h=416
net_w=416 # for PostProcYolox
model = "../../../examples/yolox/yolox_tiny.onnx" 
"model::cache" = "./yolox_tiny.trt" 
postprocessor = "BatchingPostProcYolox_45_30" 
next = "sub_graph"

[sub_graph] 
map="jpg_decoder[other:data,color:color],detect[TASK_BOX_KEY:TASK_BOX_KEY]"

backend = "MapReduce"
jump="cls_preprocess"

split="TASK_BOX_KEY"
merge="score_1,score_2,result,cls_1_result"

next="final"
instance_num=20

[final]



#### sub graph ####
[cls_preprocess]
backend="Sequential[CropTensor,ResizeTensor,cvtColorTensor,SyncTensor]"
resize_h=224
resize_w=224
color="rgb"
instance_num=8
# save_dir="./"

next="cls_1,cls_2"

#### branch 1 ####
[cls_1]
mean = "123.675, 116.28, 103.53" # 255*"0.485, 0.456, 0.406"
std = "58.395, 57.120, 57.375" # 255*"0.229, 0.224, 0.225"
backend="S[TensorrtTensor,SoftmaxArgMaxTensor,SyncTensor]"
max=4
model="./resnet18.onnx"
"model::cache"="./resnet18.trt"

# postprocessor="SoftmaxArgMax"

next="post_cls_1"

[post_cls_1]
filter="filter_score"

mean = "123.675, 116.28, 103.53" # 255*"0.485, 0.456, 0.406"
std = "58.395, 57.120, 57.375" # 255*"0.229, 0.224, 0.225"
backend="S[TensorrtTensor,SoftmaxArgMaxTensor,SyncTensor]"
max=4
model="././resnet50.onnx"
"model::cache"="./resnet50.trt"

# postprocessor="SoftmaxArgMax"


next="subgraph_final"

#### branch 2 ####

[cls_2]

mean = "123.675, 116.28, 103.53" # 255*"0.485, 0.456, 0.406"
std = "58.395, 57.120, 57.375" # 255*"0.229, 0.224, 0.225"
backend="S[TensorrtTensor,SoftmaxArgMaxTensor,SyncTensor]"
max="16;16;16"
min="16;16;1"
model="././fastervit_0_224_224.onnx"
"model::cache"="./fastervit_0_224_224.trt"

# postprocessor="SoftmaxArgMax"
batching_timeout=10


next="subgraph_final"

[subgraph_final]
map="post_cls_1[score:score_1,result:cls_1_result],cls_2[score:score_2,result:data]"
 
