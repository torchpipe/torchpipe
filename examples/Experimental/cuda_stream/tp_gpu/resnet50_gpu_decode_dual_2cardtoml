batching_timeout = 5 #默认的凑batch的超时时间
precision = "fp16" 
instance_num=2
device_id=0

[jpg_decoder]
filter="half_chance"
backend = "Torch[ Sequential[DecodeTensor,ResizeTensor,cvtColorTensor]  ]" # 需要处理背景线程cuda流同步问题可用Torch， 否则可用Sequential；Torch确保初始化和前向在同一个线程时，能准确处理多个backend的同步时机

resize_h = 224 
resize_w = 224 

instance_num = 8
color = "rgb"

next = "jpg_decoder_1"

[jpg_decoder_1]
filter="or"
backend = "Torch[ Sequential[DecodeTensor,ResizeTensor,cvtColorTensor]  ]" # 需要处理背景线程cuda流同步问题可用Torch， 否则可用Sequential；Torch确保初始化和前向在同一个线程时，能准确处理多个backend的同步时机

resize_h = 224 
resize_w = 224 
instance_num = 8
color = "rgb"
device_id=1

next = "resnet50,resnet50_1"

[resnet50]

backend = "Torch[TensorrtTensor]" # 需要处理背景线程cuda流同步问题可用Torch， Torch确保初始化和前向在同一个线程时，能准确处理cuda流同步时机;注意DynamicTensorrtTensor本身也可以正确处理。

max = "32;32"
model = "./resnet50.onnx" # or resnet50_merge_mean_std_by_onnx.onnx
mean = "123.675, 116.28, 103.53" # 255*"0.485, 0.456, 0.406"
std = "58.395, 57.120, 57.375" # 255*"0.229, 0.224, 0.225"

"model::cache" = "./resnet50_gpu_dual_2card.trt" # or ./resnet50.trt.encrypted

next="final"

[resnet50_1]

backend = "Torch[TensorrtTensor]" # 需要处理背景线程cuda流同步问题可用Torch， Torch确保初始化和前向在同一个线程时，能准确处理cuda流同步时机;注意DynamicTensorrtTensor本身也可以正确处理。

max = "32;32"
model = "./resnet50.onnx" # or resnet50_merge_mean_std_by_onnx.onnx

device_id=1
mean = "123.675, 116.28, 103.53" # 255*"0.485, 0.456, 0.406"
std = "58.395, 57.120, 57.375" # 255*"0.229, 0.224, 0.225"

"model::cache" = "./resnet50_gpu_dual_2card.trt" # or ./resnet50.trt.encrypted
next="final"

[final]
map="resnet50[result:data],resnet50_1[result:data_2]"