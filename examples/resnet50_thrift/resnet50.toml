# Schedule'parameter
batching_timeout = 5 # 凑batch的超时时间
instance_num = 8  # 实例数目
precision = "fp16" #精度 目前也可以支持fp32、int8


#[cpu_decoder]
#backend = "SyncTensor[DecodeTensor]" # 需要处理背景线程cuda流同步问题可用SyncTensor， 否则可用Sequential；SyncTensor确保初始化和前向在同一个线程时，能准确处理多个backend的同步时机
#next = "cpu_posprocess"

#[cpu_posprocess]
#backend = "SyncTensor[Sequential[ResizeTensor,cvtColorTensor]]" # 需要处理背景线程cuda流同步问题可用SyncTensor， 否则可用Sequential；SyncTensor确保初始化和前向在同一个线程时，能准确处理多个backend的同步时机


[cpu_decoder]
backend = "DecodeMat" # 需要处理背景线程cuda流同步问题可用SyncTensor， 否则可用Sequential；SyncTensor确保初始化和前向在同一个线程时，能准确处理多个backend的同步时机
next = "cpu_posprocess"

[cpu_posprocess]
backend = "SyncTensor[Sequential[ResizeMat,CvtColorMat,Mat2Tensor]]" # 需要处理背景线程cuda流同步问题可用SyncTensor， 否则可用Sequential；SyncTensor确保初始化和前向在同一个线程时，能准确处理多个backend的同步时机



### resize 操作的参数
resize_h = 224
resize_w = 224

### CvtColorMat输出的参数
color = "rgb"

next = "resnet50"

[resnet50]
backend = "SyncTensor[TensorrtTensor]" 
min = 1
max = 4
instance_num = 4  # 实例数目

model = "./resnet50.onnx" 

mean="123.675, 116.28, 103.53" # 255*"0.485, 0.456, 0.406"
std="58.395, 57.120, 57.375" # 255*"0.229, 0.224, 0.225"

# TensorrtTensor 
"model::cache"="./resnet50.trt" # or resnet50.trt.encrypted
